// <auto-generated />
using System;
using DuoPlay.DataManagement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DuoPlay.DataManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231222161517_init-tictaktoearea")]
    partial class inittictaktoearea
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DuoPlay.DataManagement.PlayareaDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ConfirmedPlayarea")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("confirmed_playarea");

                    b.Property<long>("IdPlayer")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player");

                    b.Property<string>("Playarea1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("playarea");

                    b.HasKey("Id")
                        .HasName("playareas_pkey");

                    b.ToTable("playareas", (string)null);
                });

            modelBuilder.Entity("DuoPlay.DataManagement.PlayerDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("players_pkey");

                    b.HasIndex(new[] { "Name" }, "players_name_unique")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("DuoPlay.DataManagement.SeabattleGameDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndGame")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("end_game");

                    b.Property<string>("GameMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("game_message");

                    b.Property<long?>("IdPlayerTurn")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_turn");

                    b.Property<long?>("IdPlayerWin")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_win");

                    b.Property<long>("IdSession")
                        .HasColumnType("bigint")
                        .HasColumnName("id_session");

                    b.Property<DateTime?>("StartGame")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("start_game");

                    b.HasKey("Id")
                        .HasName("seabattle_games_pkey");

                    b.HasIndex("IdPlayerTurn");

                    b.HasIndex("IdPlayerWin");

                    b.HasIndex(new[] { "IdSession" }, "seabattle_games_id_session_unique")
                        .IsUnique();

                    b.ToTable("seabattle_games", (string)null);
                });

            modelBuilder.Entity("DuoPlay.DataManagement.SessionDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndSession")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("end_session");

                    b.Property<long>("IdPlayerHost")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_host");

                    b.Property<long?>("IdPlayerJoin")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_join");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartSession")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("start_session");

                    b.HasKey("Id")
                        .HasName("sessions_pkey");

                    b.HasIndex("IdPlayerHost");

                    b.HasIndex("IdPlayerJoin");

                    b.HasIndex(new[] { "Name" }, "sessions_name_unique")
                        .IsUnique();

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("DuoPlay.DataManagement.ShipDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DecksJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("decks_json");

                    b.Property<long>("IdPlayarea")
                        .HasColumnType("bigint")
                        .HasColumnName("id_playarea");

                    b.Property<long>("Length")
                        .HasColumnType("bigint")
                        .HasColumnName("length");

                    b.HasKey("Id")
                        .HasName("ships_pkey");

                    b.HasIndex("IdPlayarea");

                    b.ToTable("ships", (string)null);
                });

            modelBuilder.Entity("DuoPlay.DataManagement.ShootDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("IdPlayerShoot")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_shoot");

                    b.Property<long>("IdSeabattleGame")
                        .HasColumnType("bigint")
                        .HasColumnName("id_seabattle_game");

                    b.Property<long>("ShootCoordinateX")
                        .HasColumnType("bigint")
                        .HasColumnName("shoot_coordinate_X");

                    b.Property<long>("ShootCoordinateY")
                        .HasColumnType("bigint")
                        .HasColumnName("shoot_coordinate_Y");

                    b.Property<DateTime>("TimeShoot")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("time_shoot");

                    b.HasKey("Id")
                        .HasName("shoots_pkey");

                    b.HasIndex("IdPlayerShoot");

                    b.HasIndex(new[] { "IdSeabattleGame" }, "shoots_id_seabattle_game_unique")
                        .IsUnique();

                    b.ToTable("shoots", (string)null);
                });

            modelBuilder.Entity("DuoPlay.DataManagement.TicTakToeGameDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BoardState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("board_state");

                    b.Property<DateTime?>("EndGame")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("end_game");

                    b.Property<string>("GameMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("game_message");

                    b.Property<long?>("IdPlayerTurn")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_turn");

                    b.Property<long?>("IdPlayerWin")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_win");

                    b.Property<long>("IdSession")
                        .HasColumnType("bigint")
                        .HasColumnName("id_session");

                    b.Property<DateTime?>("StartGame")
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("start_game");

                    b.HasKey("Id")
                        .HasName("tictaktoe_games_pkey");

                    b.HasIndex("IdPlayerTurn");

                    b.HasIndex("IdPlayerWin");

                    b.HasIndex(new[] { "IdSession" }, "tictaktoe_games_id_session_unique")
                        .IsUnique();

                    b.ToTable("tictaktoe_games", (string)null);
                });

            modelBuilder.Entity("DuoPlay.DataManagement.SeabattleGameDto", b =>
                {
                    b.HasOne("DuoPlay.DataManagement.PlayerDto", "IdPlayerTurnNavigation")
                        .WithMany("SeabattleGameIdPlayerTurnNavigations")
                        .HasForeignKey("IdPlayerTurn")
                        .HasConstraintName("seabattle_games_id_player_turn_foreign");

                    b.HasOne("DuoPlay.DataManagement.PlayerDto", "IdPlayerWinNavigation")
                        .WithMany("SeabattleGameIdPlayerWinNavigations")
                        .HasForeignKey("IdPlayerWin")
                        .HasConstraintName("seabattle_games_id_player_win_foreign");

                    b.HasOne("DuoPlay.DataManagement.SessionDto", "IdSessionNavigation")
                        .WithOne("SeabattleGame")
                        .HasForeignKey("DuoPlay.DataManagement.SeabattleGameDto", "IdSession")
                        .IsRequired()
                        .HasConstraintName("seabattle_games_id_session_foreign");

                    b.Navigation("IdPlayerTurnNavigation");

                    b.Navigation("IdPlayerWinNavigation");

                    b.Navigation("IdSessionNavigation");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.SessionDto", b =>
                {
                    b.HasOne("DuoPlay.DataManagement.PlayerDto", "IdPlayerHostNavigation")
                        .WithMany("SessionIdPlayerHostNavigations")
                        .HasForeignKey("IdPlayerHost")
                        .IsRequired()
                        .HasConstraintName("sessions_id_player_host_foreign");

                    b.HasOne("DuoPlay.DataManagement.PlayerDto", "IdPlayerJoinNavigation")
                        .WithMany("SessionIdPlayerJoinNavigations")
                        .HasForeignKey("IdPlayerJoin")
                        .HasConstraintName("sessions_id_player_join_foreign");

                    b.Navigation("IdPlayerHostNavigation");

                    b.Navigation("IdPlayerJoinNavigation");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.ShipDto", b =>
                {
                    b.HasOne("DuoPlay.DataManagement.PlayareaDto", "IdPlayareaNavigation")
                        .WithMany("Ships")
                        .HasForeignKey("IdPlayarea")
                        .IsRequired()
                        .HasConstraintName("ships_id_playarea");

                    b.Navigation("IdPlayareaNavigation");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.ShootDto", b =>
                {
                    b.HasOne("DuoPlay.DataManagement.PlayerDto", "IdPlayerShootNavigation")
                        .WithMany("Shoots")
                        .HasForeignKey("IdPlayerShoot")
                        .IsRequired()
                        .HasConstraintName("shoots_id_player_shoot_foreign");

                    b.HasOne("DuoPlay.DataManagement.SeabattleGameDto", "IdSeabattleGameNavigation")
                        .WithOne("Shoot")
                        .HasForeignKey("DuoPlay.DataManagement.ShootDto", "IdSeabattleGame")
                        .IsRequired()
                        .HasConstraintName("shoots_id_seabattle_game_foreign");

                    b.Navigation("IdPlayerShootNavigation");

                    b.Navigation("IdSeabattleGameNavigation");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.TicTakToeGameDto", b =>
                {
                    b.HasOne("DuoPlay.DataManagement.PlayerDto", "IdPlayerTurnNavigation")
                        .WithMany("TicTakToeGameIdPlayerTurnNavigations")
                        .HasForeignKey("IdPlayerTurn")
                        .HasConstraintName("tictaktoe_games_id_player_turn_foreign");

                    b.HasOne("DuoPlay.DataManagement.PlayerDto", "IdPlayerWinNavigation")
                        .WithMany("TicTakToeGameIdPlayerWinNavigations")
                        .HasForeignKey("IdPlayerWin")
                        .HasConstraintName("tictaktoe_games_id_player_win_foreign");

                    b.HasOne("DuoPlay.DataManagement.SessionDto", "IdSessionNavigation")
                        .WithOne("TicTakToeGame")
                        .HasForeignKey("DuoPlay.DataManagement.TicTakToeGameDto", "IdSession")
                        .IsRequired()
                        .HasConstraintName("tictaktoe_games_id_session_foreign");

                    b.Navigation("IdPlayerTurnNavigation");

                    b.Navigation("IdPlayerWinNavigation");

                    b.Navigation("IdSessionNavigation");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.PlayareaDto", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.PlayerDto", b =>
                {
                    b.Navigation("SeabattleGameIdPlayerTurnNavigations");

                    b.Navigation("SeabattleGameIdPlayerWinNavigations");

                    b.Navigation("SessionIdPlayerHostNavigations");

                    b.Navigation("SessionIdPlayerJoinNavigations");

                    b.Navigation("Shoots");

                    b.Navigation("TicTakToeGameIdPlayerTurnNavigations");

                    b.Navigation("TicTakToeGameIdPlayerWinNavigations");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.SeabattleGameDto", b =>
                {
                    b.Navigation("Shoot");
                });

            modelBuilder.Entity("DuoPlay.DataManagement.SessionDto", b =>
                {
                    b.Navigation("SeabattleGame");

                    b.Navigation("TicTakToeGame");
                });
#pragma warning restore 612, 618
        }
    }
}
